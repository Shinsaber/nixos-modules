# -- général -------------------------------------------------------------------

# Terminal moderne avec support couleurs vraies
set -g  default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

setw -g  xterm-keys   on
set  -s  escape-time  10      # séquences de commandes plus rapides
set  -sg repeat-time  600     # augmente le délai de répétition
set  -s  focus-events on

set  -q -g status-utf8 on     # attendre de l'UTF-8 (tmux < 2.2)
setw -q -g utf8        on

set -g history-limit 10000    # historique plus important (recommandé)

# Tuer une session/fenêtre/panneau plus facilement
bind x confirm-before -p "kill-pane #P? (y/n)"    kill-pane
bind X confirm-before -p "kill-window #W? (y/n)"  kill-window
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Changer le préfixe de 'Ctrl+B' à 'Ctrl+Espace'
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# -- affichage -----------------------------------------------------------------

set  -g base-index      1     # commencer la numérotation des fenêtres à 1
setw -g pane-base-index 1     # rendre la numérotation des panneaux cohérente avec les fenêtres

set -g renumber-windows on    # renuméroter les fenêtres lorsqu'une fenêtre est fermée

set -g status-interval     10 # rafraîchir la barre d'état toutes les 10 secondes
set -g display-panes-time 800 # durée d'affichage des indicateurs de panneaux légèrement augmentée
set -g display-time      1000 # durée d'affichage des messages d'état légèrement augmentée

# effacer l'écran sans toucher à l'historique
bind -n C-l send-keys C-l

# effacer l'écran ET l'historique (raccourci alternatif)
bind -n C-k send-keys C-l \; run 'sleep 0.2' \; clear-history

# activité
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# créer une session
bind C-c new-session

# créer une session nommée
bind C-s command-prompt -p "Nom de la nouvelle session: " "new-session -d -s '%%'"

# lister toutes les sessions avec aide contextuelle
bind C-l choose-tree -s -O time -f '#{?session_grouped,#{session_group}: ,}#{session_name}#{?session_attached, (attached),}' -K 'x: kill-session, d: detach, Enter: attach'

# interface de gestion complète (sessions + fenêtres + panneaux)
bind C-w choose-tree -Z

# navigation entre les sessions
bind    BTab switch-client -l  # aller à la dernière session
bind -r C-p  switch-client -p  # session précédente
bind -r C-n  switch-client -n  # session suivante

# renommer la session courante
bind '$' command-prompt -I "#S" "rename-session '%%'"

# navigation entre les panneaux
bind > swap-pane -D       # échanger le panneau courant avec le suivant
bind < swap-pane -U       # échanger le panneau courant avec le précédent

# Intégration NeoVim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^S (n?vim?x?)(-wrapped)?(diff)?$'"

# rechercher dans zsh
bind-key -n C-f send-keys C-r

## Diviser la fenêtre courante horizontalement (garde le répertoire)
bind-key 's' if-shell "$is_vim" "send-keys Escape ':split' Enter" 'split-window -v -c "#{pane_current_path}"'
## Diviser la fenêtre courante verticalement (garde le répertoire)
bind-key 'v' if-shell "$is_vim" "send-keys Escape ':vsplit' Enter" 'split-window -h -c "#{pane_current_path}"'

## Navigation entre les panneaux
bind-key -n 'C-t' if-shell "$is_vim" 'send-keys C-t'  { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind-key -n 'C-s' if-shell "$is_vim" 'send-keys C-s'  { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-r' if-shell "$is_vim" 'send-keys C-r'  { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind-key -n 'C-n' if-shell "$is_vim" 'send-keys C-n'  { if -F '#{pane_at_right}'  '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-t' if -F '#{pane_at_left}'   '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-s' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-r' if -F '#{pane_at_top}'    '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-n' if -F '#{pane_at_right}'  '' 'select-pane -R'

# maximiser le panneau courant
bind + resize-pane -Z

# redimensionnement des panneaux
bind -r T resize-pane -L 2
bind -r S resize-pane -D 2
bind -r R resize-pane -U 2
bind -r N resize-pane -R 2

# navigation entre les fenêtres
unbind n
unbind p
bind -r C-t previous-window # sélectionner la fenêtre précédente
bind -r C-n next-window     # sélectionner la fenêtre suivante
bind    Tab last-window     # aller à la dernière fenêtre active

# Accès rapide aux fenêtres par numéro
bind -r 1 select-window -t 1
bind -r 2 select-window -t 2
bind -r 3 select-window -t 3
bind -r 4 select-window -t 4
bind -r 5 select-window -t 5
bind -r 6 select-window -t 6
bind -r 7 select-window -t 7
bind -r 8 select-window -t 8
bind -r 9 select-window -t 9

# Créer une nouvelle fenêtre dans le répertoire courant
bind c new-window     -c "#{pane_current_path}"
bind C command-prompt -p "Name of new window:" "new-window -n '%%' -c '#{pane_current_path}'"

# Renommer la fenêtre courante
bind , command-prompt -I "#W" "rename-window '%%'"

# Désactiver le renommage automatique pour une fenêtre spécifique
bind M setw automatic-rename off \; command-prompt -I "#W" "rename-window '%%'"

# activer/désactiver la souris
bind m run "cut -c3- '#{TMUX_CONF}' | sh -s _toggle_mouse"

# -- souris et ergonomie ------------------------------------------------------

# Support souris moderne
set -g mouse on

# Défilement plus fluide
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# -- mode copie ---------------------------------------------------------------

setw -g mode-keys vi
bind Enter copy-mode # entrer en mode copie

# Raccourcis personnalisés pour le mode copie (style vi)
bind -T copy-mode-vi v      send -X begin-selection           # 'v' : commencer la sélection (mode visuel)
bind -T copy-mode-vi C-v    send -X rectangle-toggle          # 'Ctrl+v' : basculer en sélection rectangulaire
bind -T copy-mode-vi y      send -X copy-selection-and-cancel # 'y' : copier la sélection et quitter le mode copie
bind -T copy-mode-vi Escape send -X cancel                    # 'Échap' : annuler la sélection et quitter le mode copie
bind -T copy-mode-vi T      send -X start-of-line             # 'T' : aller au début de la ligne
bind -T copy-mode-vi N      send -X end-of-line               # 'N' : aller à la fin de la ligne
bind -T copy-mode-vi /      send -X search-forward            # '/' : recherche vers l'avant
bind -T copy-mode-vi ?      send -X search-backward           # '?' : recherche vers l'arrière

# copier vers le presse-papier système (Wayland et X11)
if -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' \
  'bind y run -b "tmux save-buffer - | wl-copy"'

if -b '[ "$XDG_SESSION_TYPE" = "x11" ] && command -v xclip > /dev/null 2>&1' \
  'bind y run -b "tmux save-buffer - | xclip -selection clipboard"'

# -- tampons ------------------------------------------------------------------

#bind b list-buffers     # lister les tampons de collage
#bind p paste-buffer -p  # coller depuis le tampon de tête
#bind P choose-buffer    # choisir le tampon à coller

# -- aide ----------------------------------------------------------------------

# Afficher l'aide pour la gestion des sessions
bind h display-popup -E -w 78 -h 23 'echo "
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Session                            │ Fenetre                            ┃
┃   Leader + C-c : Nouvelle          │   Leader + c : Nouvelle            ┃
┃   Leader + C-s : Nouvelle nommée   │   Leader + C : Nouvelle Nommée     ┃
┃   Leader + \$  : Renommer courante  │   Leader + , : Renommer courante   ┃
┃   Leader + Q   : Tuer courante     │   Leader + X   : Tuer courante     ┃
┠────────────────────────────────────┼────────────────────────────────────┨
┃ Panneau                            │ Autre                              ┃
┃   C-t : To left                    │   C-l : Clear Panneau              ┃
┃   C-s : To Botom                   │   C-k : clear + delete historique  ┃
┃   C-r : To Top                     │   C-f : Recherche zsh              ┃
┃   C-n : To Right                   ├────────────────────────────────────┨
┃   Leader + < : Échanger suivant    │ Dans Choose-Tree (Leader + w)      ┃
┃   Leader + > : Échanger précédent  │   Enter      : Attacher la session ┃
┃   Leader + + : Maximiser           │   x          : Tuer la session     ┃
┃                                    │   q / Escape : Quitter sans action ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
"; read'

# -- menu contextuel souris avancé --------------------------------------------

# Menu contextuel au clic droit (MouseDown3Pane) avec options intelligentes :
# - Détecte automatiquement le contexte (mode copie, mot/ligne/lien sous la souris, vim)
# - Propose des actions contextuelles adaptées selon la situation
# - Inclut la gestion des panneaux, division, échange et zoom
# - Options spéciales vim quand nvim/vim est détecté
# 
# Actions disponibles dans le menu :
# - Navigation : Go To Top/Bottom (si en mode copie)
# - Recherche : Search For [mot] (Ctrl+r)
# - Texte : Type/Copy mot sous la souris (Ctrl+y/c)
# - Ligne : Copy Line (l)
# - Liens : Type/Copy hyperlink (Ctrl+h/h)
# - Vim (si détecté) : Save/Quit/Split Horizontal/Split Vertical
# - Division : Horizontal/Vertical Split (h/v)
# - Échange : Swap Up/Down/Marked (u/d/s)
# - Gestion : Kill/Respawn/Mark/Zoom (X/R/m/z)
bind-key -T root MouseDown3Pane if-shell -F -t = "#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}" { select-pane -t = } \
{ \
  if-shell "$is_vim" \
  { \
    display-menu -T "#[align=centre]#{pane_index} (#{pane_id}) [VIM]" -t = -x M -y M \
      "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } \
      "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } \
      '' \
      "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } \
      "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } \
      "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer "#{q:mouse_word}" } \
      "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer "#{q:mouse_line}" } \
      '' \
      "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } \
      "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer "#{q:mouse_hyperlink}" } \
      '' \
      "Vim: Save" w { send-keys Escape ':w' Enter } \
      "Vim: Save & Quit" q { send-keys Escape ':wq' Enter } \
      "Vim: Quit" Q { send-keys Escape ':q!' Enter } \
      "Vim: Split Horizontal" H { send-keys Escape ':split' Enter } \
      "Vim: Split Vertical" V { send-keys Escape ':vsplit' Enter } \
      "Vim: New Tab" t { send-keys Escape ':tabnew' Enter } \
      '' \
      "Tmux Split Horizontal" h { split-window -h } \
      "Tmux Split Vertical" v { split-window -v } \
      '' \
      "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
      "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
      "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } \
      '' \
      Kill X { kill-pane } \
      Respawn R { respawn-pane -k } \
      "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
      "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
  } \
  { \
    display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M \
      "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } \
      "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } \
      '' \
      "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } \
      "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } \
      "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer "#{q:mouse_word}" } \
      "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer "#{q:mouse_line}" } \
      '' \
      "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } \
      "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer "#{q:mouse_hyperlink}" } \
      '' \
      "Horizontal Split" h { split-window -h } \
      "Vertical Split" v { split-window -v } \
      '' \
      "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
      "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
      "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } \
      '' \
      Kill X { kill-pane } \
      Respawn R { respawn-pane -k } \
      "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
      "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
  } \
}
